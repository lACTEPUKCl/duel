import {
  SlashCommandBuilder,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  EmbedBuilder,
  MessageFlags,
} from "discord.js";
import { duelModel } from "../models/duel.js";
import { weapons } from "../config/duelConfig.js";
import { checkUserBinding } from "../utils/checkUserBinding.js";
import { classes } from "../classes/classes.js";

function getClassDefinition(classId) {
  if (classes[classId]) return classes[classId];
  for (const baseKey of Object.keys(classes)) {
    const adv = classes[baseKey].advanced;
    for (const lvl of Object.keys(adv)) {
      const found = adv[lvl].find((o) => o.id === classId);
      if (found) return found;
    }
  }
  return { statMultipliers: {} };
}

function getEffectiveStat(statsObj, key) {
  const base = statsObj[key] || 0;
  const classId = statsObj.class;
  const classDef = getClassDefinition(classId);
  const mult = classDef.statMultipliers?.[key] ?? 0;
  const bonus = Math.floor(base * mult);
  return base + bonus;
}

export const data = new SlashCommandBuilder()
  .setName("duel")
  .setDescription("–í—ã–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –¥—É—ç–ª—å")
  .addUserOption((option) =>
    option.setName("–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫").setDescription("–ö–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞ –¥—É—ç–ª—å")
  )
  .addIntegerOption((option) =>
    option
      .setName("—Å—Ç–∞–≤–∫–∞")
      .setDescription(
        "–°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ —Å—Ç–∞–≤–∏–º (0 = –±–µ–∑ —Å—Ç–∞–≤–∫–∏, 1000 = –º–∞–∫—Å–∏–º—É–º)"
      )
      .setMinValue(0)
      .setMaxValue(1000)
  );

export async function execute(interaction) {
  try {
    const userDoc = await checkUserBinding(interaction);
    if (!userDoc) return;

    const challengerId = interaction.user.id;
    const opponentOption = interaction.options.getUser("–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫");
    const opponentId = opponentOption ? opponentOption.id : null;
    const betAmount = interaction.options.getInteger("—Å—Ç–∞–≤–∫–∞") || 0;
    const ALLOWED_CHANNEL = "1362879255293333524";
    if (interaction.channel.id !== ALLOWED_CHANNEL) {
      return interaction.reply({
        content: `‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ <#${ALLOWED_CHANNEL}>.`,
        flags: MessageFlags.Ephemeral,
      });
    }
    if (opponentOption) {
      if (opponentOption.bot) {
        return interaction.reply({
          content: "‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –±–æ—Ç–∞!",
          flags: MessageFlags.Ephemeral,
        });
      }
      if (opponentId === challengerId) {
        return interaction.reply({
          content: "‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
          flags: MessageFlags.Ephemeral,
        });
      }
    }
    if (betAmount > 1000) {
      return interaction.reply({
        content: "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 1000 –±–æ–Ω—É—Å–æ–≤!",
        flags: MessageFlags.Ephemeral,
      });
    }

    const existing = await duelModel.findPendingDuel(challengerId);
    if (existing) {
      return interaction.reply({
        content: "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏!",
        flags: MessageFlags.Ephemeral,
      });
    }
    if (opponentOption) {
      const oppExisting = await duelModel.findPendingDuel(opponentId);
      if (oppExisting) {
        return interaction.reply({
          content: `‚ùå ${opponentOption.username} —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–π –¥—É—ç–ª–∏!`,
          flags: MessageFlags.Ephemeral,
        });
      }
    }

    await duelModel.connect();
    const statsColl = duelModel.client.db("SquadJS").collection("mainstats");
    const challengerData = await statsColl.findOne({ discordid: challengerId });

    if (!challengerData?.duelGame) {
      return interaction.reply({
        content:
          "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/createcharacter`, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è.",
        flags: MessageFlags.Ephemeral,
      });
    }

    const duelStats = challengerData.duelGame.stats || {};
    const strength = getEffectiveStat(duelStats, "strength");
    const agility = getEffectiveStat(duelStats, "agility");
    const intelligence = getEffectiveStat(duelStats, "intelligence");
    const accuracy = getEffectiveStat(duelStats, "accuracy");
    const hp = getEffectiveStat(duelStats, "hp");
    const defense = getEffectiveStat(duelStats, "defense");
    const level = challengerData.duelGame.level || 1;
    const className = classes[duelStats.class]?.name || duelStats.class || "‚Äî";
    const weaponId = challengerData.duelGame.equipped?.weapon;
    const weapon = weapons.find((w) => w.id === weaponId) || weapons[0];
    const statsStr =
      `‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${level} (${className})\n` +
      `üî™ –û—Ä—É–∂–∏–µ: ${weapon.name}\n` +
      `üí™ –°–∏–ª–∞: ${strength}\n` +
      `üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: ${agility}\n` +
      `üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: ${intelligence}\n` +
      `üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}\n` +
      `‚ù§Ô∏è HP: ${hp}\n` +
      `üõ° –ó–∞—â–∏—Ç–∞: ${defense}`;
    const wins = challengerData.duelGame.duels?.wins || 0;
    const losses = challengerData.duelGame.duels?.losses || 0;
    const total = wins + losses;
    const winrate = total ? ((wins / total) * 100).toFixed(1) + "%" : "0%";
    const duelsStr =
      `üèÜ –ü–æ–±–µ–¥—ã: ${wins}\n` +
      `‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: ${losses}\n` +
      `üìä –í–∏–Ω—Ä–µ–π—Ç: ${winrate}\n` +
      `‚öîÔ∏è –í—Å–µ–≥–æ –±–æ—ë–≤: ${total}`;
    const attacker =
      interaction.guild.members.cache.get(challengerId) ||
      (await interaction.guild.members.fetch(challengerId));
    const attackerName = attacker.user.globalName || attacker.user.username;
    const opponentName = opponentOption
      ? interaction.guild.members.cache.get(opponentId)?.globalName ||
        opponentOption.username
      : "";

    const duelTitle = opponentOption
      ? `‚öîÔ∏è ${attackerName} –≤—ã–∑—ã–≤–∞–µ—Ç ${opponentName}!`
      : `‚öîÔ∏è ${attackerName} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥—É—ç–ª—å! (–õ—é–±–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å)`;

    const embed = new EmbedBuilder()
      .setColor(0xffd700)
      .setTitle(duelTitle)
      .addFields(
        { name: "üìä –°—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞", value: statsStr, inline: true },
        { name: "üìà –†–µ–∫–æ—Ä–¥ –¥—É—ç–ª–µ–π", value: duelsStr, inline: true },
        {
          name: "üí∞ –°—Ç–∞–≤–∫–∞",
          value: betAmount ? `${betAmount} –±–æ–Ω—É—Å–æ–≤` : "–ù–µ—Ç",
          inline: true,
        }
      )
      .setThumbnail(weapon.image || null);

    const button = new ButtonBuilder()
      .setCustomId(`duel_accept_${interaction.id}`)
      .setLabel("–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å")
      .setStyle(ButtonStyle.Success);

    const replyMsg = await interaction.reply({
      embeds: [embed],
      components: [new ActionRowBuilder().addComponents(button)],
      fetchReply: true,
    });

    await duelModel.createDuel(
      interaction.id,
      challengerId,
      opponentId,
      betAmount,
      weaponId,
      replyMsg.id
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ duel:", err);
    await interaction.reply({
      content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É—ç–ª–∏",
      flags: MessageFlags.Ephemeral,
    });
  }
}
